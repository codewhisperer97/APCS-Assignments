import java.util.ArrayList;
import java.util.Scanner;

public class ChangingBooths 
{
	public static final int ERROR = -1;
	
	private static Scanner scanner;
	
	private static int booths = 0;
	private static boolean[] list;
	
	public static void main(String[] args) {
		scanner = new Scanner(System.in);
		
		booths = getNumBooths();
		System.out.println("There are " + booths + " booths.");
		
		/*
		 * Create a boolean array that is as large as our number of booths. Then,
		 * fill each slot of the array with false to indicate empty booths.
		 */
		list = new boolean[booths];
		for(int i = 0; i < list.length; i++)
		{
			list[i] = false;
		}
		
		System.out.println(getBoothRep());
		
		ArrayList<Series> series = new ArrayList<Series>();
		int start = -1;
		int end = -1;
		/*
		 * This while loop will continue for as long as not all of the booths
		 * are full.
		 */
		while(!boothsFull())
		{
			/*
			 * This for loop will count once through each index of list.  When
			 * it finds a slot that is empty (false), it will create a new Series object
			 * and store it as the 'start' position of a new Series object, then
			 * it will continue until it finds a full (true) slot and place the
			 * last empty slot as the 'end' position of the Series.  Then it
			 * will store that new Series object in the series ArrayList and
			 * continue until it has created a Series object for each time there
			 * is a gap of empty booths.
			 */
			for(int i = 0; i < list.length; i++)
			{
				
			}
		}
	}
	
	/**
	 * Method to return a valid, in-range integer of how many booths are present
	 * in the scenario.  This method calles _getNumBooths() which allows it to
	 * perform step-by-step sanitation:
	 * First, __getNumBooths() makes sure that the number retrieved from the 
	 * scanner is a properly parsed Integer.
	 * Second, _getNumBooths() makes sure that the number is within the range that
	 * we want for this purpose, namely, greater than 0.
	 * @return The sanitized input.
	 */
	public static int getNumBooths()
	{
		int response = ERROR;
		
		while((response = _getNumBooths()) < 1)
		{
			System.out.println("Can't be less than 1! Try again: ");
		}
		return response;
	}
	
	private static int _getNumBooths()
	{
		int response = ERROR;
		
		while((response = __getNumBooths()) == ERROR)
		{
			System.out.print("Not an integer! Try again: ");
		}
		return response;
	}
	
	private static int __getNumBooths()
	{
		int response = ERROR;
		
		try
		{
			response = Integer.parseInt(scanner.next());
		}
		catch(Exception e)
		{
			/*
			 * If this portion of the code is run, then there was an error
			 * parsing the String input into an Integer, so it should return
			 * an error.  I'm resetting 'response' to ERROR here in case there's
			 * a weird change in the try block.
			 */
			response = ERROR;
		}
		return response;
	}
	
	private static String getBoothRep()
	{
		StringBuffer response = new StringBuffer();
		for(int i = 0; i < list.length; i++)
		{
			response.append(list[i] ? "X" : "-").append(" ");
		}
		response.append("\n");
		
		return response.toString();
	}
	
	/**
	 * Single-purpose method to determine whether all booths are full so that
	 * we know when to stop execution.
	 * @return True if all booths are full, false otherwise.
	 */
	private static boolean boothsFull()
	{
		for(int i = 0; i < list.length; i++)
		{
			if(list[i] == false)
			{
				return false;
			}
		}
		return true;
	}
}
